#include "Package.hpp"
#include "Book.hpp"
#include "Page.hpp"
#include <cassert>

using namespace pcw;

////////////////////////////////////////////////////////////////////////////////
Package::Package(int id, int owner, const Book& book)
  : Project(id)
  , owner_(owner)
  , origin_(std::static_pointer_cast<const Book>(book.shared_from_this()))
{}

////////////////////////////////////////////////////////////////////////////////
Package::Package(int id)
  : Project(id)
  , owner_()
  , origin_()
{}

////////////////////////////////////////////////////////////////////////////////
const Book&
Package::origin() const noexcept
{
  return *origin_;
}

////////////////////////////////////////////////////////////////////////////////
int
Package::owner() const noexcept
{
  return owner_;
}

////////////////////////////////////////////////////////////////////////////////
void
Package::set_origin(const Book& book)
{
  origin_ = std::static_pointer_cast<const Book>(book.shared_from_this());
}

////////////////////////////////////////////////////////////////////////////////
void
Package::set_owner(int owner)
{
  owner_ = owner;
}
