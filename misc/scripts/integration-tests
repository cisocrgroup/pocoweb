#!/bin/bash
# integration-tests

v=-v
#v=-Ss
fail="\033[0;31mFAIL\033[0m"
success="\033[0;32mSUCCESS\033[0m"
cookies=$(mktemp)
config=$1
name=$(git config -f $config --get plugin-simple-login.default-user)
pass=$(git config -f $config --get plugin-simple-login.default-pass)
host="pocoweb.cis.lmu.de/rest"
curlopt=
errors=0
json=
sid=
bid=

finish() {
	rm $cookies
}

expect() {
	local url="$1:"
	local want=$2
	local got=$3
	if [ "$want" != "$got" ]; then
		((error++))
		printf "%-50s" "$url"
		echo -e "$fail    [want=$want; got=$got]"
	else
		printf "%-50s" "$url"
		echo -e "$success [want=got=$want]"
	fi
}

curl_get() {
	curl $curlopt $v -w '%%RESPONSE_CODE=%{http_code}%%' \
		-H "Authorization: $sid" \
		-g -6 http://$host$1
}

curl_post() {
	curl $curlopt $v -w '%%RESPONSE_CODE=%{http_code}%%' \
		-H "Content-Type: application/json" \
		-H "Authorization: $sid" \
		-d $2 \
		-g -6 http://$host$1
}

curl_delete() {
	curl $curlopt $v -w '%%RESPONSE_CODE=%{http_code}%%' \
		-H "Authorization: $sid" \
		-X DELETE \
		-g -6 http://$host$1
}

curl_upload() {
	curl $curlopt $v -w '%%RESPONSE_CODE=%{http_code}%%' \
		-H "Content-Type: application/gzip" \
		-H "Authorization: $sid" \
		--data-binary @$2 \
		-g -6 http://$host$1
}

code() {
	echo "$1" | sed -e 's/.*%RESPONSE_CODE=\([0-9][0-9]*\)%.*/\1/g'
}

json() {
	sed -e 's/\(.*\)%RESPONSE_CODE=[0-9][0-9]*%\(.*\)/\1\2/g' <<< "$1"
}

json_get() {
	sed -e "s/.*\"$1\":\([^,]*\).*/\1/g" <<< "$2" | tr -d '"{}' | tr -s " " "_"
}

#
# API TEST FUNCTIONS
#
login() {
	local name=$1
	local pass=$2
	local want=$3
	local post="{\"name\":\"$name\",\"pass\":\"$pass\"}"
	local url="/login"
	local res=$(curl_post $url $post)
	expect "POST $url" $want $(code $res)
	sid=$(json_get "sid" $(json "$res"))
}

loggedin() {
	local name=$1
	local want=$2
	local url="/login"
	local res=$(curl_get $url)
	expect "GET $url" $want $(code "$res")
}

logout() {
	local url="/logout"
	local res=$(curl_get $url)
	expect "GET $url" 200 $(code "$res")
}

upload() {
	local p=$1
	local want=$2
	local url="/books"
	local res=$(curl_upload $url $p)
	expect "POST $url" $want $(code $res)
	bid=$(json_get "projectId" $(json "$res"))
}

get_book() {
	local id=$1
	local key=$2
	local val=$3
	local url="/books/$id"
	local res=$(curl_get $url)
	expect $url 200 $(code $res)
	expect "$key=$val" $val $(json_get $key $(json "$res"))
}

check_book_does_not_exist() {
	local id=$1
	local url="/books/$id"
	local res=$(curl_get $url)
	expect "GET $url" 404 $(code $res)
}

update_book() {
	local id=$1
	local key=$2
	local val=$3
	local url="/books/$id"
	local post="{\"$key\":\"$val\"}"
	local res=$(curl_post $url $post)
	expect $url 200 $(code $res)
	expect "$key=$val" $val $(json_get $key $(json "$res"))
}

remove_book() {
	local id=$1
	local url="/books/$id"
	local res=$(curl_delete $url)
	expect "DELETE $url" 200 $(code "$res")
}

count_book() {
	local id=$1
	local q=$2
	local want=$3
	local url="/books/$id/search"
	curlopt="-G --data-urlencode q=$2"
	local res=$(curl_get $url)
	local status=$(code "$res")
	local json=$(json "$res")
	expect "GET $url" 200 "$status"
	expect "GET $url" $want $(json_get "nWords" "$json")
	curlopt=""
}

get_line() {
	local bid=$1
	local pid=$2
	local lid=$3
	local str=$4
	local url="/books/$bid/pages/$pid/lines/$lid"
	local res=$(curl_get $url)
	expect "GET $url" 200 $(code "$res")
	expect "GET $url" "$str" $(json_get cor "$res")
}

correct_line() {
	local bid=$1
	local pid=$2
	local lid=$3
	local cor=$4
	local url="/books/$bid/pages/$pid/lines/$lid"
	local res=$(curl_post $url)
	expect "GET $url" 200 $(code "$res")
	expect "GET $url" "$str" $(json_get cor "$res")
}

#
# START OF SCRIPT
#

if [ $# -ne 1 ]; then
	echo "usage: $0 config"
	exit 255
fi

trap finish EXIT
# start_server
sid=""
login $name $pass 200
loggedin $name 200
sid=""
login "invalid" "invalid" 403
sid=""
loggedin "invalid" 403
sid=""
login $name $pass 200
loggedin $name 200
## HOBBES
upload $PWD/misc/data/test/hobbes-ocropus.zip 201
update_book $bid "title" "Leviathan"
update_book $bid "author" "Hobbes"
update_book $bid "language" "Latin"
update_book $bid "year" 1668
update_book $bid "uri" "http://example.org"
update_book $bid "description" "desc"
get_book $bid "title" "Leviathan"
get_book $bid "author" "Hobbes"
get_book $bid "language" "Latin"
get_book $bid "year" 1668
get_book $bid "uri" "http://example.org"
get_book $bid "description" "desc"
count_book $bid "Bomine" 1
count_book $bid "Cæſaris" 1
count_book $bid "CANNOTFINDME" 0
count_book $bid "ſunt" 9
get_line $bid 42 1 "34-"
get_line $bid 42 2 "De_Bomine."
get_line $bid 42 40 "mi"
remove_book $bid
check_book_does_not_exist $bid
## ROLLENHAGEN
upload $PWD/misc/data/test/rollenhagen_reysen_1603.zip 201
update_book $bid "title" "Reysen"
update_book $bid "author" "Rollenhagen"
update_book $bid "language" "German"
update_book $bid "year" 1603
update_book $bid "uri" "http://example.org"
update_book $bid "description" "desc"
get_book $bid "title" "Reysen"
get_book $bid "author" "Rollenhagen"
get_book $bid "year" 1603
get_book $bid "uri" "http://example.org"
get_book $bid "description" "desc"
count_book $bid "von" 6
count_book $bid "CANNOTFINDME" 0
remove_book $bid
check_book_does_not_exist $bid

# logout
logout
## $sid was not reset -- user should still *not* be logged in
loggedin $name 403

exit $error
