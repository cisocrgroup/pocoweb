#!/bin/bash
# integration-tests

v=-v
fail="\033[0;31mFAIL\033[0m"
success="\033[0;32mSUCCESS\033[0m"
cookies=$(mktemp)
config=$1
name=$(git config -f $config --get plugin-simple-login.default-user)
pass=$(git config -f $config --get plugin-simple-login.default-pass)
host=$(git config -f $config --get daemon.host)
port=$(git config -f $config --get daemon.port)
curlopt=
errors=0
spid=0
json=
sid=
bid=

finish() {
	# echo removing $cookies
	rm $cookies
	# echo killing $spid
	kill $spid > /dev/null 2>&1
}

start_server() {
	# echo "config: $config"
	# echo "starting server"
	./pcwd $config 2> /dev/null &
	spid=$!
	# echo "started server ($spid)"
	sleep 1
}

expect() {
	url="$1:"
	want=$2
	got=$3
	if [ "$want" != "$got" ]; then
		((error++))
		printf "%-30s" "$url"
		echo -e "$fail    [want=$want; got=$got]"
	else
		printf "%-30s" "$url"
		echo -e "$success [want=got=$want]"
	fi
}

curl_get() {
	curl $curlopt --silent -v -w '%%RESPONSE_CODE=%{http_code}%%' \
		-H "Authorization: $sid" \
		-g -6 http://[$host]:$port$1
}

curl_post() {
	curl $curlopt --silent -v -w '%%RESPONSE_CODE=%{http_code}%%' \
		-H "Content-Type: application/json" \
		-H "Authorization: $sid" \
		-X POST -d $2 \
		-g -6 http://[$host]:$port$1
}

curl_delete() {
	curl $curlopt --silent -v -w '%%RESPONSE_CODE=%{http_code}%%' \
		-H "Authorization: $sid" \
		-X DELETE \
		-g -6 http://[$host]:$port$1
}

code() {
	sed -e 's/.*%RESPONSE_CODE=\([0-9][0-9]*\)%.*/\1/g' <<< $1
}

json() {
	sed -e 's/\(.*\)%RESPONSE_CODE=[0-9][0-9]*%\(.*\)/\1\2/g' <<< $1
}

json_get() {
	sed -e "s/.*\"$1\":\([^,]*\).*/\1/g" <<< $2 | tr -d '"{}'
}

#
# API TEST FUNCTIONS
#
login() {
	local name=$1
	local pass=$2
	local want=$3
	local post="{\"name\":\"$name\",\"pass\":\"$pass\"}"
	local url="/login"
	local res=$(curl_post $url $post)
	expect "POST $url" $want $(code $res)
	sid=$(json_get "sid" $(json $res))
}

loggedin() {
	local name=$1
	local want=$2
	local url="/login"
	local res=$(curl_get $url)
	expect "GET $url" $want $(code $res)
}

upload() {
	local p=$1
	local a=$2
	local t=$3
	local want=$4
	local url="/books"
	local post="{\"author\":\"$a\",\"title\":\"$t\",\"file\":\"$p\"}"
	local res=$(curl_post $url $post)
	expect "POST $url" $want $(code $res)
	expect "author=$a" $a $(json_get "author" $(json $res))
	expect "title=$t" $t $(json_get "title" $(json $res))
	bid=$(json_get "id" $(json $res))
}

get_book() {
	local id=$1
	local key=$2
	local val=$3
	local url="/books/$id"
	local res=$(curl_get $url)
	expect $url 200 $(code $res)
	expect "$key=$val" $val "$(json_get $key $(json $res))"
}

update_book() {
	local id=$1
	local key=$2
	local val=$3
	local url="/books/$id"
	local post="{\"$key\":\"$val\"}"
	local res=$(curl_post $url $post)
	expect $url 200 $(code $res)
	expect "$key=$val" $val "$(json_get $key $(json $res))"
}

remove_book() {
	local id=$1
	local url="/books/$id"
	local res=$(curl_delete $url)
	expect "DELETE $url" 200 $(code $res)
}

#
# START OF SCRIPT
#

if [ $# -ne 1 ]; then
	echo "usage: $0 config"
	exit 255
fi

trap finish EXIT
start_server
sid=""
login $name $pass 200
loggedin $name 200
sid=""
login "invalid" "invalid" 403
sid=""
loggedin "invalid" 403
sid=""
login $name $pass 200
loggedin $name 200
upload misc/data/test/hobbes-ocropus.zip "hobbes" "leviathan" 201
update_book $bid "title" "Leviathan"
update_book $bid "author" "Hobbes"
update_book $bid "year" 1668
update_book $bid "uri" "http://example.org"
update_book $bid "description" "desc"
get_book $bid "title" "Leviathan"
get_book $bid "author" "Hobbes"
get_book $bid "year" 1668
get_book $bid "uri" "http://example.org"
get_book $bid "description" "desc"
remove_book $bid

exit $error
